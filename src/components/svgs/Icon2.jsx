import React, { useEffect, useRef, useState } from "react";
import { animated, config, useSprings } from "react-spring";

function Curly1(props) {
  return (
    <g
      {...props}
      clipPath="url(#__lottie_element_18)"
      display="block"
      mask="url(#__lottie_element_22)"
    >
      <path
        fill="#10e47e"
        d="M135.577 14.017c-.145-.145-.145-.144-.29-.144.145 0 .145-.001.29.144zm-3.328-18.786c-.145 0-.145-.144-.29-.144 0 0 .145-.001.29.144zm55.272 4.191c4.051-.867 7.959-1.59 12.01-2.457 4.92-1.012 9.694-2.022 14.469-2.167-2.749.867-5.498 2.022-8.247 3.034-2.315.723-4.486 1.59-6.656 2.457-8.392 3.179-17.074 6.359-25.466 9.827-6.077 2.457-12.154 4.769-18.376 7.081-3.183 1.156-6.366 2.311-9.694 3.034-1.302.289-2.75.578-4.052.867-1.447.289-2.894.578-4.341.723a11.85 11.85 0 01-4.485-.434c-.868-.289-1.447-.578-2.17-1.156a3.368 3.368 0 01-1.013-1.011c0-.145-.145-.289-.29-.434-.289-.723-.723-1.3-.868-2.023-.145-.434-.289-.722-.289-1.156 0-.434-.145-.723-.145-1.012 0-.723 0-1.444.289-2.167.289-.434.434-.867.579-1.301.579-1.445 1.013-2.89 1.447-4.335.868-2.89 1.736-5.636 2.315-8.526v-1.59c-.145-.434-.144-.722-.289-1.156h-2.026c-1.592.289-3.038.722-4.485 1.156-.868.289-1.881.578-2.749.867-1.736.578-3.473 1.012-5.209 1.59-3.617 1.156-7.235 2.456-10.852 3.757-4.341 1.445-8.682 3.179-13.023 4.769-1.881.723-3.906 1.445-5.787 2.168-6.366 2.312-12.589 4.623-19.1 6.502-3.328 1.012-6.656 2.023-9.984 2.746-3.039.578-6.222 1.156-9.405 1.301-1.736 0-3.472.145-5.208 0-1.592-.145-3.184-.289-4.631-.723l-2.17-.867-1.736-.867c-.723-.434-1.302-.867-1.881-1.301-.434-.434-1.013-.722-1.447-1.3-.434-.434-.724-.867-1.013-1.301-.289-.289-.579-.577-.724-1.011-.289-.578-.723-1.3-.868-2.023-.145-.723-.289-1.3-.434-2.023-.145-.723-.289-1.59-.289-2.313V1.301v-4.769c0-2.168-.001-4.48-.29-6.648-.289-1.734-.578-3.467-1.157-5.057-.289-.434-.434-.867-.723-1.156l-1.303-1.301c-.289-.145-.579-.433-1.013-.578-.289 0-.433-.145-.578-.145-1.158-.145-2.316 0-3.618.145-2.749.434-5.498 1.445-8.102 2.312a75.241 75.241 0 00-7.959 3.035C.434-11.271-3.472-9.393-7.379-7.37c-1.881.867-3.618 1.734-5.354 2.746-3.617 2.023-7.09 3.902-10.707 5.925-3.328 1.879-6.801 3.756-10.129 5.635-3.039 1.59-5.932 3.324-8.826 4.914-1.013.434-1.881 1.011-2.894 1.589-1.302.723-2.749 1.445-4.051 2.168-3.183 1.59-6.367 3.035-9.55 4.48-1.447.578-3.038 1.156-4.485 1.734-1.447.578-2.894 1.155-4.486 1.589-3.039.867-6.366 1.59-9.694 1.59-1.302 0-2.749-.145-4.196-.434-1.302-.289-2.604-.866-3.762-1.589-.434-.289-.724-.578-1.158-.867-.289-.289-.724-.578-1.013-1.012-.434-.578-1.013-1.156-1.302-1.734-.434-.578-.723-1.155-.868-1.878-.145-.723-.289-1.301-.434-2.024-.145-1.445-.434-3.034-.434-4.479 0-.723-.145-1.3-.145-2.023-.289-3.324-.434-6.792-.868-10.116-.434-2.168-1.013-4.335-1.881-6.503-.434-.867-.868-1.734-1.447-2.601-.579-.578-1.303-1.301-2.026-1.879-.723-.578-1.736-1.155-2.604-1.589-1.158-.434-2.17-.722-3.328-1.156-3.328-.434-6.656-.29-9.984.144-2.749.434-5.354 1.012-7.958 1.59-2.46.578-4.774 1.156-7.234 1.734-4.775 1.301-9.55 2.746-14.325 4.191-3.183 1.012-6.367 1.878-9.55 3.034-1.736.723-3.617 1.301-5.353 1.879-6.222 2.023-12.444 4.046-18.666 5.925-5.643 1.734-11.286 3.323-16.929 4.913-6.945 2.023-13.89 4.191-20.98 6.214 3.907-1.879 7.668-3.757 11.575-5.636 1.881-.867 3.618-1.734 5.499-2.457l6.077-2.601c7.524-3.179 15.192-6.358 22.861-9.248 4.63-1.734 9.405-3.469 14.035-5.203 3.039-1.012 5.932-1.878 8.971-2.745 6.511-2.023 13.167-3.902 19.968-5.347 6.511-1.445 13.311-2.89 20.112-2.312 1.736.145 3.473.289 5.209.867 1.447.434 2.75.867 3.473 1.734 1.158.723 2.459 1.589 3.472 2.601.868 1.012 1.882 2.023 2.605 3.179.868 1.445 1.446 2.89 2.025 4.48.434 1.445.869 2.746 1.158 4.191.434 2.457.723 5.057.868 7.514 0 1.445.144 3.035.289 4.625 0 1.59.145 3.178.29 4.768.145 1.012.434 2.167.723 3.179.145.145.145.289.29.434l1.157 1.156c.289.145.724.433 1.013.578l1.736.434c1.881.145 3.618 0 5.354-.145 2.315-.289 4.486-1.011 6.656-1.734 2.17-.723 4.341-1.59 6.511-2.457 5.354-2.312 10.707-5.058 15.771-7.948A522.006 522.006 0 00-34.003-.145c3.617-2.023 7.38-4.046 10.997-6.069 2.46-1.301 4.775-2.601 7.235-3.902 1.592-.867 3.182-1.589 4.774-2.456 2.894-1.445 5.788-2.89 8.682-4.191 3.183-1.445 6.367-2.89 9.55-4.046 1.447-.578 3.038-1.012 4.485-1.59 1.592-.578 3.038-1.155 4.63-1.589a32.658 32.658 0 015.209-.867C22.138-25 22.572-25 23.151-25h.434c.723.145 1.447.144 2.17.289 1.302.434 2.604 1.012 3.762 1.879.579.434 1.158.867 1.737 1.445.579.578 1.013 1.156 1.447 1.734 1.736 2.746 2.315 5.924 2.749 8.959.289 2.457.434 4.769.434 7.226.145 1.59.144 3.179.144 4.769 0 1.59 0 3.323.145 5.057.145.867.29 1.879.579 2.746 0 .145.144.433.289.578.434.434.868.722 1.302 1.156.579.434 1.158.723 1.737 1.012.868.289 1.881.577 2.894.722 3.328.289 6.656.145 9.839-.289 3.183-.434 6.366-1.156 9.405-2.023 3.183-.867 6.221-1.589 9.26-2.601 4.92-1.445 9.839-3.179 14.759-4.913C91.591.867 96.799-1.011 102.153-2.89c4.341-1.59 8.681-2.89 13.022-4.335 2.026-.723 4.051-1.301 6.077-1.879 1.302-.289 2.46-.578 3.618-1.012 1.592-.578 3.182-1.011 4.774-1.156h1.881c.723.145 1.447.144 2.026.289.723.145 1.447.433 2.17.867.723.434 1.158 1.012 1.592 1.59.579 1.012 1.157 2.312 1.302 3.468.145.723.29 1.445.29 2.168 0 .867 0 1.589-.145 2.312a208.958 208.958 0 00-.868 4.191c-.579 2.023-1.157 4.191-1.736 6.214-.145.723-.434 1.3-.579 2.023-.145.578-.434 1.3-.579 1.878h1.447c1.592-.289 3.038-.722 4.63-1.011 2.026-.434 4.051-.867 5.932-1.445 3.762-1.156 7.524-2.602 11.286-3.758 5.354-1.734 10.563-3.323 15.772-4.768 4.485-1.301 8.971-2.312 13.456-3.324z"
        transform="translate(436 72) scale(2)"
      ></path>
    </g>
  );
}

function Icon2() {
  const [slide, setSlide] = useState(false);
  const ref = useRef(null);

  const curls = [<Curly1 key="curly-1" />];

  const springs = useSprings(
    curls.length,
    curls.map((i) => {
      return {
        //opacity
        opacity: slide ? 1 : 0,
        width: slide ? "100%" : "0%",
        x: slide ? 100 : 0,
        delay: slide ? 500 : 0,
        config: config.molasses,
      };
    })
  );

  const animatedCurls = springs.map((animatedStyle, index) => {
    return (
      <animated.g key={index} style={animatedStyle}>
        {curls[index]}
      </animated.g>
    );
  });

  const setItemVisible = (e) => {
    if (e[0]?.isIntersecting) {
      setSlide(!slide);
    }
  };

  const options = {
    root: null,
    rootMargin: "0px",
    threshold: 0.95,
  };

  useEffect(() => {
    const observer = new IntersectionObserver(setItemVisible, options);
    if (ref.current) {
      observer.observe(ref.current);
    }

    return () => {
      if (ref.current) {
        observer.unobserve(ref.current);
      }
    };
  }, [ref]);
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="500"
      height="200"
      viewBox="0 0 872 144"
      ref={ref}
      style={{
        width: "100%",
        height: "100%",
        position: "absolute",
        top: "50%",
        left: "0",
      }}
    >
      <defs>
        <clipPath id="__lottie_element_18">
          <path d="M0 0H872V144H0z"></path>
        </clipPath>
        <mask id="__lottie_element_22">
          <path
            fillOpacity="0"
            stroke="red"
            strokeLinecap="round"
            strokeWidth="12"
            d="M-424 28s188.969-74.911 223-63c40 14 9.533 73.465 38 79 36 7 176.183-94.796 217-85 25 6-5.51 67.915 31 74 42 7 146.358-50.832 183-49 20 1-23 56 6 52 24.785-3.419 152-48 152-48"
            display="block"
            transform="translate(436 72)"
          ></path>
        </mask>
      </defs>
      {animatedCurls}
    </svg>
  );
}

export default Icon2;
